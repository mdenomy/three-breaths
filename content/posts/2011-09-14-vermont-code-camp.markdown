---
author: mdenomy
date: 2011-09-14 12:38:18+00:00
draft: false
title: Vermont Code Camp
type: post
url: /2011/09/14/vermont-code-camp/
tags:
- .NET
- Software
- TDD
---

Just got back from a road trip to Burlington VT for [Vermont Code Camp](http://vtcodecamp.org/) 3. It was a great code camp, lots of good sessions and speakers, well-organized, and generally a lot of fun.

The first session I attended was [Dane Morgridge's](http://danemorgridge.com/) talk on ASP.NET MVC3: A Gateway to Rails. I was really interested in this talk, because as a TDD junkie, I was curious if part of the "gateway to Rails" involved embracing testing. I still feel like the .NET community is behind the curve on TDD and BDD, and I wanted to hear Dane's perspective on making the switch from .NET to Rails. His presentation was very much an overview of the goodness in Rails and ASP.NET MVC3, like [convention over configuration](http://en.wikipedia.org/wiki/Convention_over_configuration) and how having a [separation of concerns](http://weblogs.asp.net/scottgu/archive/2007/10/14/asp-net-mvc-framework.aspx) with MVC allows for a more testable system. Afterwards I was able to catch up with Dane between sessions and he showed me a few things he is doing with [Cucumber ](http://cukes.info/)and [BDD](http://en.wikipedia.org/wiki/Behavior_Driven_Development). I have to say the readability of Cucumber makes it look very appealing and we talked about how BDD tests can be more maintainable than TDD/unit level tests. There is a right time to use one and the right time to use another.

Next up was David Howell's [Tackling Big Data with Hadoop](http://www.slideshare.net/poorlytrainedape/tackling-big-data-with-hadoop-9212076). I knew very little about [Hadoop](http://hadoop.apache.org/), but had heard a few good things about it and was looking to learn a bit more. David's talk focused on using Hadoop's Map-Reduce capabilities to handle large data sets. We also talked a bit about what constitutes "big data". If you are not familiar with Map-Reduce, check out [Google's 2004 paper](http://labs.google.com/papers/mapreduce.html) on it. David went over the basics of a hadoop cluster and showed how it could be used in a distributed architecture to tackle a big data set. He also touched on how some of the fault tolerance could be implemented using the cluster and distributing the same job to multiple nodes. To wrap up he ran a simplified Map-Reduce demos on a small data sets that was appropriate scaled for the time that we had available.

I would have to say the third session was one of my favorites, Functional Programming on the JVM. This talk was given by Jonathan Phillips and another developer named Jack (sorry Jack, missed your last name), both from [Dealer.com](http://www.dealer.com/index.htm). As someone who has spent the last....well lets just say a lot of years doing OO programming, I struggle with the shift to functional programming, especially when state and immutablility come into play. I have been to several functional programming and F# presentations that have left me confused, but 5 minutes into their talk Jonathan and Jack went over closures and recursion as they apply to functional programming and it was like a light going off. Suddenly immutability made more sense. After the overview of functional programming they went into 3 different languages that can be used to do functional programming on the JVM: [Groovy](http://groovy.codehaus.org/), [Scala](http://www.scala-lang.org/), and [Clojure](http://clojure.org/). The used a simple example, comparing the amount and clarity of code that you would write using pure Java versus each of the 3 other languages. They also went over some of the pro's and cons about Groovy, Scala, and Clojure. It left me with a lot to think about, and I am eager to experiment with all 3 languages.

Another great talk was Free and Open Source Software (FOSS) in the Enterprise by Kevin Thorley, also from [Dealer.com](http://www.dealer.com/). Kevin laid out what you need to consider using FOSS software. What is the community support, how many contributors are there, how robust is it, how easy is it to use and what documentation exists, do you really need it or do you want to use it because you just read some great blog post about NoSQL. One thing that Kevin said really rang true when he said that open source is not free and that we need to understand and accurately assess what the cost is to use and maintain it. Kevin went over how they use [MongoDB](http://www.mongodb.org/), [RabbitMQ](http://www.rabbitmq.com/), [Spring](http://www.springsource.org/), and [Solr](http://lucene.apache.org/solr/) at Dealer.com. Don't misinterpret Kevin's statement about it not being free. Obviously they rely heavily on FOSS at Dealer.com, but you have to be honest about why you are using it and what is the cost going to be to your organization to use "free software".

I give a lot of credit to the guys from[ Dealer.com](http://www.dealer.com/) for their participation at the code camp. They are a Burlington based company and they had a significant presence at the code camp. It is one thing to say that you are passionate about software, it is another to do something about it. Developers from Dealer.com did 4 of the 26 total sessions. I followed up with a few of them after the sessions and you can tell they are really into the technologies that they were presenting.

The last 2 presentations were familiar ground for me, but I still learned a few things. Vincent Grondin's talk on mocking and mocking frameworks. Vincent gave a very good discussion of mocking and the two type of mocking frameworks available: those based on dynamic proxies, and those based on the[ .NET Profiler API](http://msdn.microsoft.com/en-us/magazine/cc300553.aspx)'s. Examples of frameworks based on dynamic proxies are [Moq ](http://code.google.com/p/moq/)and [NMock3](http://nmock3.codeplex.com/). Examples of .NET profiler based frameworks include Telerik's [JustMock ](http://www.telerik.com/products/mocking.aspx)and Typemock [Isolator](http://www.typemock.com/). The .NET profile based mocking frameworks have some significant advantages in being able to mock out static methods and even system calls. I have been using Moq (and previously NMock2) and I have had to write custom wrapper classes to work around problems mocking static methods and system calls.

The day wrapped up for me with Josh Sled's talk on dependency injection. Josh gave a good overview of why you would want to use DI, but also gave an honest assessment of pros and cons of using them. I think any time we decide to take on a new framework we need to understand what the cost is (similar to what Kevin Thorley said). I am a big fan of DI and IOC frameworks, but you need to be aware of what the cost is to using that framework. We touched on a few IOC frameworks that you can use like [Spring](http://www.springsource.org/) (Java), [Castle Windsor](http://docs.castleproject.org/Windsor.MainPage.ashx) (.NET), and [StructureMap](http://structuremap.net/structuremap/) (.NET).

All in all it was a great code camp. It is usually hard to justify spending a beautiful late summer day in the basement of UVM, but it worked in this case. I am really looking forward to all the slides being available to I can check out some of the sessions I couldn't make.

Thanks to Julie Lerman, Rob Hale, and all the other organizers, volunteers, and sponsors for putting together a great event.
